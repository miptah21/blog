{"AI/AIChatbot":{"slug":"AI/AIChatbot","filePath":"AI/AIChatbot.md","title":"AIChatbot","links":[],"tags":[],"content":"My AI Experiment\nHere is my AI chatbot:\n\n"},"AI/Overview":{"slug":"AI/Overview","filePath":"AI/Overview.md","title":"Overview","links":[],"tags":[],"content":"AI engineering refers to the process of building applications on top of foundation\nmodels.\nIf traditional ML engineering involves developing ML models, AI engineering lever‚Äê\nages existing ones. The availability and accessibility of powerful foundation models\nlead to three factors that, together, create ideal conditions for the rapid growth of AI\nengineering as a discipline:\nFactor 1: General-purpose AI capabilities\nFactor 2: Increased AI investments\n\nAccording to WallStreetZen, companies that mentioned AI in their earning calls saw their stock price increase more than those that didn‚Äôt: an average of a 4.6% increase compared to 2.4%. It‚Äôs unclear whether it‚Äôs causation (AI makes these companies more successful) or correlation (companies are successful because they are quick to adapt to new technologies).\n\nFactor 3: Low entrance barrier to building AI applications"},"MLOps/1.-Introduction-to-Machine-Learning-in-Production/Overview":{"slug":"MLOps/1.-Introduction-to-Machine-Learning-in-Production/Overview","filePath":"MLOps/1. Introduction to Machine Learning in Production/Overview.md","title":"Overview","links":[],"tags":[],"content":"Lihat Dokumen\nBerikut dokumen bisa dibaca langsung di halaman:\n\n\n"},"MLOps/1.-Introduction-to-Machine-Learning-in-Production/Week-1---Overview-of-ML-Lifecycle-and-Deployment":{"slug":"MLOps/1.-Introduction-to-Machine-Learning-in-Production/Week-1---Overview-of-ML-Lifecycle-and-Deployment","filePath":"MLOps/1. Introduction to Machine Learning in Production/Week 1 - Overview of ML Lifecycle and Deployment.md","title":"Week 1 - Overview of ML Lifecycle and Deployment","links":[],"tags":[],"content":"Dokumen ini memberikan overview ML lifecycle dan deployment, serta menekankan pentingnya MLOps untuk membangun karier AI yang efektif.\nüìå Takeaways Utama\n1. Pentingnya MLOps\n\nKarier AI yang efektif membutuhkan:\n\nKonsep machine learning / deep learning\nKemampuan production engineering\n\n\nMenggabungkan fondasi ML dengan software development modern.\n\n2. Lifecycle Proyek ML\nEmpat tahap utama:\n\nScoping\n\nMendefinisikan proyek, metrik, dan sumber daya.\n\n\nData\n\nDefinisi, labeling, organisasi data.\nMembuat baseline performa.\n\n\nModeling\n\nMemilih dan melatih model.\nAnalisis error untuk perbaikan.\n\n\nDeployment\n\nMen-deploy, memonitor, dan maintain sistem di production.\n\n\n\n3. Gap POC ke Production\n\nModel di Jupyter Notebook hanya mewakili 5-10% kode total proyek ML.\nDeployment memerlukan integrasi software yang lengkap agar model bisa berjalan di dunia nyata.\n\n4. Tantangan Deployment\na. ML / Statistical Issues\n\nConcept drift: perubahan definisi Y given X.\nData drift: perubahan distribusi X.\nBisa menurunkan performa model setelah deployment.\n\nb. Software Engineering Issues\n\nKeputusan penting:\n\nReal-time vs batch prediction\nCloud vs edge/browser deployment\nSumber daya: CPU/GPU/memori\nLatency &amp; throughput\nLogging, security, privacy\n\n\n\n5. Deployment Patterns\n\nNew Product / Capability: gradual ramp-up + monitoring.\nAutomate / Assist Manual Task: shadow mode deployment (ML berjalan paralel, output tidak digunakan untuk keputusan).\nReplace Previous ML System: gradual ramp-up + monitoring + rollback.\nCanary Deployment: deploy ke sebagian kecil traffic, monitoring, lalu naikkan traffic.\nBlue-Green Deployment: old (blue) &amp; new (green) version, switch traffic, mudah rollback.\n\n6. Derajat Otomasi\nDeployment adalah spektrum:\n\nHuman-only\nShadow mode / AI assistance\nPartial automation (human-in-the-loop untuk prediksi tidak pasti)\nFull automation\n\n7. Monitoring\n\nPenting untuk tracking health dan performance sistem.\nLangkah-langkah:\n\nBrainstorm masalah &amp; metrik terkait.\nMonitor:\n\nSoftware metrics: memory, compute, latency, throughput, server load\nInput metrics: avg input length, missing values, brightness\nOutput metrics: null output, user redo search, switch to typing\n\n\nSetting threshold &amp; adaptasi metrik seiring waktu\n\n\nModeling &amp; deployment adalah proses iteratif.\n\n8. Model Maintenance\n\nRetraining bisa manual atau otomatis (manual lebih umum).\nMonitoring membantu:\n\nMenentukan kapan retraining dibutuhkan\nAnalisis error lebih lanjut\n\n\n\n9. Pipeline Monitoring\n\nSistem AI kompleks dengan banyak komponen membutuhkan monitoring di tiap stage pipeline.\nPerubahan di satu modul bisa memengaruhi modul lainnya.\n\n10. Data Change Rate\n\nData user lebih lambat drift\nData enterprise/B2B lebih cepat berubah\n\n\n\nKesimpulan: ML production bukan hanya soal model, tapi integrasi end-to-end, monitoring, maintenance, dan deployment pattern yang tepat. MLOps adalah skill kunci untuk membuat ML bisa memberi nilai bisnis nyata.\n\nLihat Dokumen\nBerikut dokumen bisa dibaca langsung di halaman:\n\n"},"MLOps/1.-Introduction-to-Machine-Learning-in-Production/Week-2---Select-and-Train-a-Model":{"slug":"MLOps/1.-Introduction-to-Machine-Learning-in-Production/Week-2---Select-and-Train-a-Model","filePath":"MLOps/1. Introduction to Machine Learning in Production/Week 2 - Select and Train a Model.md","title":"Week 2 - Select and Train a Model","links":[],"tags":[],"content":"Dokumen ini membahas pemilihan dan pelatihan model ML, dengan fokus pada iterasi, data-centric AI, dan manajemen eksperimentasi.\n\nüìå 1. Modelling Overview &amp; Key Challenges\n\nML lifecycle: iterasi antara model, hyperparameter, dan data.\nData-centric AI vs Model-centric AI:\n\nKualitas data sangat penting.\nMeningkatkan data sering lebih efektif daripada fokus hanya pada arsitektur model.\n\n\nAI system = kode + data.\n\n\nüìå 2. Iterative Model Development\n\nProses pengembangan model bersifat iteratif:\n\nTrain model\nAnalisis error\nAudit performa\nPerbaikan data &amp; hyperparameter\n\n\n\n\nüìå 3. Low Average Error Isn‚Äôt Enough\n\nContoh penting:\n\nNavigational queries di search engine\nSlice data kritikal: loan approval, rekomendasi produk\n\n\nPerformance harus sempurna pada subset penting, meskipun jarang muncul.\n\n\nüìå 4. Rare Classes &amp; Skewed Datasets\n\nAkurasi saja tidak cukup untuk dataset tidak seimbang.\nGunakan metrik:\n\nConfusion matrix\nPrecision / Recall\nF1 score\n\n\nBerlaku juga untuk multi-class problems dengan rare classes.\n\n\nüìå 5. Establish a Baseline\n\nPenting menetapkan baseline performa di awal proyek:\n\nHuman-level performance (HLP) untuk data tidak terstruktur\nState-of-the-art / open source\nQuick-and-dirty implementation\nPerformance sistem lama\n\n\n\n\nüìå 6. Tips Memulai Modelling\n\nLakukan literature search, tapi jangan obses.\nGunakan algoritma dengan open-source implementation yang wajar.\nPertimbangkan deployment constraints setelah baseline.\nSanity-check code: coba overfit dataset kecil.\n\n\nüìå 7. Error Analysis\n\nCore dari proses ML development.\nLangkah-langkah:\n\nPeriksa mislabeled examples\nTag error (misal: car noise, blurry image)\nMetrics: fraction of errors per tag, misclassification rate, frequency tag\n\n\nPrioritaskan perbaikan berdasarkan:\n\nGap ke HLP\nFrekuensi kategori\nKemudahan meningkatkan akurasi\nBusiness importance\n\n\n\n\nüìå 8. Adding / Improving Data\n\nKumpulkan lebih banyak data untuk kategori yang butuh improvement.\nGunakan data augmentation untuk unstructured data:\n\nRealistis\nMapping jelas x ‚Üí y\nAlgoritma saat ini performa buruk\n\n\nPerhatikan resiko menambah data terutama untuk model besar.\n\n\nüìå 9. Adding Features (Structured Data)\n\nUntuk structured data sulit membuat contoh baru:\n\nTambahkan fitur baru yang relevan.\nContoh: fitur vegetarian preference untuk rekomendasi restoran.\n\n\n\n\nüìå 10. Experiment Tracking\n\nPenting untuk mengelola banyak eksperimen:\n\nInformasi yang perlu dicatat: algoritma/code version, dataset, hyperparameters, metrics, trained model\n\n\nTools:\n\nText file / spreadsheet\nWeights &amp; Biases, Comet, MLflow\n\n\n\n\nüìå 11. From Big Data to Good Data\n\nData berkualitas tinggi konsisten sepanjang lifecycle ML:\n\nCover kasus penting\nDefinisi konsisten\nFeedback tepat waktu dari production\nUkuran data sesuai kebutuhan\n\n\n\n\n\nKesimpulan: Keberhasilan ML bukan hanya soal arsitektur model, tapi data berkualitas + error analysis + iterative improvement + tracking eksperimen.\n\nLihat Dokumen\nBerikut dokumen bisa dibaca langsung di halaman:\n\n"},"MLOps/1.-Introduction-to-Machine-Learning-in-Production/Week-3---Data-Definition-and-Baseline":{"slug":"MLOps/1.-Introduction-to-Machine-Learning-in-Production/Week-3---Data-Definition-and-Baseline","filePath":"MLOps/1. Introduction to Machine Learning in Production/Week 3 - Data Definition and Baseline.md","title":"Week 3 - Data Definition and Baseline","links":[],"tags":[],"content":"Dokumen ini membahas definisi data dan menetapkan baseline performa untuk proyek ML, dengan fokus pada kualitas data, human-level performance, dan scoping proyek.\n\nüìå 1. Mengapa Data Definition Sulit\n\nLabeling tidak konsisten ‚Üí algoritma bingung.\nContoh: deteksi iguana, defect phone, speech recognition.\nInstruksi labeling ambigu ‚Üí interpretasi berbeda antar labeler.\n\n\nüìå 2. Jenis Masalah Data\nDikelompokkan menurut data type &amp; jumlah data:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData TypeSmall Data (‚â§10k)Big Data (&gt;10k)UnstructuredLabel harus bersih &amp; konsisten, bisa direview manualFokus pada proses data &amp; instruksi konsisten untuk tim besarStructuredData sulit ditambah, human labeling terbatasFokus pada proses data &amp; standardisasi\n\nUnstructured: manusia cukup baik, bisa pakai data augmentation.\nStructured: sulit menambah data, labeling manual tidak selalu konsisten.\n\n\nüìå 3. Meningkatkan Konsistensi Label\n\nBeberapa labeler memberi anotasi pada contoh yang sama.\nDiskusi antara ML engineer, expert, dan labeler untuk menyepakati definisi.\nJika input (x) kurang jelas ‚Üí perbaiki (misal lighting kamera).\nIterasi instruksi labeling sampai kesepakatan meningkat.\nStrategi:\n\nStandarisasi label\nGabungkan kelas ambigu\nTambahkan kelas ‚Äúborderline/unintelligible‚Äù untuk contoh tidak pasti\n\n\n\n\nüìå 4. Human Level Performance (HLP)\n\nKenapa diukur: estimasi Bayes error, prioritas error, target realistis untuk bisnis.\nTantangan: HLP bisa memberi algoritma ‚Äúkeuntungan‚Äù jika instruksi labeling ambigu.\nMeningkatkan HLP: perbaiki konsistensi labeling ‚Üí data lebih bersih ‚Üí ML lebih baik.\n\n\nüìå 5. Mendapatkan Data\n\nTime investment: fokus iterasi cepat (model, hyperparameter, data, training, error analysis).\nInventory data sources: milik sendiri, crowdsourced, paid, purchased. Pertimbangkan jumlah, biaya, kualitas, privasi, regulasi.\nLabeling options: in-house, outsourced, crowdsourced.\n\nJangan langsung menambah data &gt;10x.\nSME penting untuk tugas spesialisasi.\nML engineers labeling beberapa hari ‚Üí membangun intuisi.\n\n\n\n\nüìå 6. Data Pipeline\n\nPre-processing &amp; Cleaning: spam removal, merge user ID, dsb.\nReplicability: manual pre-processing OK di POC, tapi untuk production gunakan tools: TensorFlow Transform, Apache Beam, Airflow.\nMeta-data, Provenance &amp; Lineage:\n\nMetadata: info tentang data (waktu, kamera, labeler ID)\nProvenance: asal data\nLineage: sequence steps pipeline\n\n\nTracking ini penting untuk maintain &amp; debugging pipeline kompleks.\n\n\nüìå 7. Balanced Train/Dev/Test Splits\n\nSmall datasets: random split bisa tidak representatif ‚Üí gunakan balanced split (proporsi positif sama di train/dev/test).\nLarge datasets: random split biasanya cukup representatif.\n\n\nüìå 8. Scoping Proyek ML\n\nTujuan: pastikan impact &amp; feasibility.\nProses:\n\nBrainstorm masalah bisnis ‚Üí solusi AI\nNilai feasibility &amp; value\nTentukan milestones &amp; resource\n\n\nFeasibility: benchmark eksternal, HLP, ketersediaan fitur prediktif, histori proyek.\nValue: hubungkan ML metrics ‚Üí business metrics (revenue, engagement) via estimasi Fermi.\nEthical considerations: pastikan net positive societal value, fairness, bebas bias.\nMilestones &amp; resourcing: ML metrics, software metrics (latency, throughput), business metrics, resources, timeline. Untuk ketidakpastian ‚Üí POC atau benchmarking.\n\n\n\nKesimpulan: Kualitas data, baseline performa, HLP, dan scoping proyek adalah fondasi sukses ML production. Iterasi data + model + error analysis + pipeline replicability sangat penting.\n\nLihat Dokumen\nBerikut dokumen bisa dibaca langsung di halaman:\n\n"},"index":{"slug":"index","filePath":"index.md","title":"index","links":[],"tags":[],"content":"Hai, saya Miftah! üëã\nSelamat datang di blog saya, tempat saya membagikan catatan.\n\nSilakan jelajahi artikel-artikel saya, dan semoga bermanfaat!"}}